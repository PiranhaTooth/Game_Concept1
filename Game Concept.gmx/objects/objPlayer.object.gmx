<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle_up</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set variables
vx = 0;
vy = 0;
player_speed = 1.5;
timer = 0;
state = "IDLE";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//establish movement variables
up = keyboard_check(ord('W'));
left = keyboard_check(ord('A'));
down = keyboard_check(ord('S'));
right = keyboard_check(ord('D'));
sprint = keyboard_check(vk_shift);

//state machine for movement
switch (state)
{
    case "IDLE":
    {
        image_speed = 0;
        vx = 0;
        vy = 0;
        
        if (up) state = "UP";
        if (down) state = "DOWN";
        if (left) state = "LEFT";
        if (right) state = "RIGHT";
        if (!up &amp;&amp; !down &amp;&amp; !left &amp;&amp; !right) state = "IDLE";
        
        break;
    }
    case "UP":
    {
        image_speed = room_speed/500;
        sprite_index = spr_player_up;
        
        vx = 0;
        vy = -1 * player_speed;
        
        if (up) state = "UP";
        if (down) state = "DOWN";
        if (left) state = "LEFT";
        if (right) state = "RIGHT";
        if (!up &amp;&amp; !down &amp;&amp; !left &amp;&amp; !right) state = "IDLE";
        
        break;
    }
    case "DOWN":
    {
        image_speed = room_speed/500;
        sprite_index = spr_player_down;
        
        vx = 0;
        vy = player_speed;
        
        if (up) state = "UP";
        if (down) state = "DOWN";
        if (left) state = "LEFT";
        if (right) state = "RIGHT";
        if (!up &amp;&amp; !down &amp;&amp; !left &amp;&amp; !right) state = "IDLE";
        
        break;
    }
    case "LEFT":
    {
        image_speed = room_speed/500;
        sprite_index = spr_player_left;
        
        vx = -1 * player_speed;
        vy = 0;
        
        if (up) state = "UP";
        if (down) state = "DOWN";
        if (left) state = "LEFT";
        if (right) state = "RIGHT";
        if (!up &amp;&amp; !down &amp;&amp; !left &amp;&amp; !right) state = "IDLE";
        
        break;
    }
    case "RIGHT":
    {
        image_speed = room_speed/500;
        sprite_index = spr_player_right
        
        vx = player_speed;
        vy = 0;
        
        if (up) state = "UP";
        if (down) state = "DOWN";
        if (left) state = "LEFT";
        if (right) state = "RIGHT";
        if (!up &amp;&amp; !down &amp;&amp; !left &amp;&amp; !right) state = "IDLE";
        
        break;
    }
}

//if you press shift increase speed by 1
if sprint
{
    player_speed = 2.5;
}
else
{
    player_speed = 1.5;
}

x += vx;
y += vy;


//room border clamp
x = clamp(x, 0, room_width);
y = clamp(y, 0, room_height);

//window_mouse_set(clamp(window_mouse_get_x(), 0, window_get_width()), clamp(window_mouse_get_y(), 0, window_get_height()));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
